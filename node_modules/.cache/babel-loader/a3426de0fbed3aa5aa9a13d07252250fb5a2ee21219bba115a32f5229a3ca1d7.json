{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sophia\\\\Downloads\\\\Spring 2025\\\\Capstone Project\\\\CampusConnect_1\\\\capstone-project-campusconnect-team\\\\src\\\\pages\\\\MapNavigation.js\",\n  _s = $RefreshSig$();\n{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapNavigation = ({\n  destination,\n  userLocation,\n  travelMode\n}) => {\n  _s();\n  // Create a reference to the map div element\n  const mapRef = useRef(null);\n  const directionsServiceRef = useRef(null);\n  const directionsRendererRef = useRef(null);\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps API not loaded.\");\n      return;\n    }\n\n    //initialize google maps & center on destination\n    const map = new window.google.maps.Map(mapRef.current, {\n      zoom: 16,\n      //default zoom level\n      center: userLocation || destination //center map on destination\n    });\n\n    //create services for directions and rendering\n    directionsServiceRef.current = new window.google.maps.DirectionsService();\n    directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n    directionsRendererRef.current.setMap(map);\n\n    // //request user's location as lat & long coordinates\n    // navigator.geolocation.getCurrentPosition((position) => {\n    //     const userLocation = {\n    //         lat: position.coords.latitude,\n    //         lng: position.coords.longitude,\n    //     };\n    if (userLocation && destination) {\n      const request = {\n        origin: userLocation,\n        destination: destination,\n        travelMode: window.google.maps.TravelMode[travelMode] // Use travelMode prop\n      };\n      directionsServiceRef.current.route(request, (result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          directionsRendererRef.current.setDirections(result);\n        } else {\n          console.error(\"Directions request failed:\", status);\n        }\n      });\n    }\n  }, [destination, userLocation, travelMode]); // Re-run effect if `userLocation` or `destination` changes\n\n  //map div to display map\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 12\n  }, this);\n};\n_s(MapNavigation, \"IuKuIsIKLv6aHcO1S3QGQkguyyc=\");\n_c = MapNavigation;\nexport default MapNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapNavigation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","MapNavigation","destination","userLocation","travelMode","_s","mapRef","directionsServiceRef","directionsRendererRef","window","google","maps","console","error","map","Map","current","zoom","center","DirectionsService","DirectionsRenderer","setMap","request","origin","TravelMode","route","result","status","DirectionsStatus","OK","setDirections","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_1/capstone-project-campusconnect-team/src/pages/MapNavigation.js"],"sourcesContent":["{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\n\nconst MapNavigation = ({  destination, userLocation, travelMode  }) => {\n    // Create a reference to the map div element\n    const mapRef = useRef(null);\n    const directionsServiceRef = useRef(null);\n    const directionsRendererRef = useRef(null);\n\n    useEffect(() => {\n        if (!window.google || !window.google.maps) {\n            console.error(\"Google Maps API not loaded.\");\n            return;\n        }\n\n        //initialize google maps & center on destination\n        const map = new window.google.maps.Map(mapRef.current, {\n            zoom: 16,//default zoom level\n            center: userLocation || destination, //center map on destination\n        });\n\n        //create services for directions and rendering\n        directionsServiceRef.current = new window.google.maps.DirectionsService();\n        directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n        directionsRendererRef.current.setMap(map);\n\n        // //request user's location as lat & long coordinates\n        // navigator.geolocation.getCurrentPosition((position) => {\n        //     const userLocation = {\n        //         lat: position.coords.latitude,\n        //         lng: position.coords.longitude,\n        //     };\n        if (userLocation && destination) {\n            const request = {\n                origin: userLocation,\n                destination: destination,\n                travelMode: window.google.maps.TravelMode[travelMode], // Use travelMode prop\n        };\n\n        directionsServiceRef.current.route(request, (result, status) => {\n            if (status === window.google.maps.DirectionsStatus.OK) {\n                directionsRendererRef.current.setDirections(result);\n            } else {\n                console.error(\"Directions request failed:\", status);\n            }\n        });\n       }\n    }, [destination, userLocation, travelMode]);// Re-run effect if `userLocation` or `destination` changes\n\n    //map div to display map\n    return <div ref={mapRef} style={{ width: \"100%\", height: \"500px\" }} />;\n};\n\nexport default MapNavigation;\n"],"mappings":";;AAAA,CAAC;AACD;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAC;EAAGC,WAAW;EAAEC,YAAY;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACnE;EACA,MAAMC,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMS,oBAAoB,GAAGT,MAAM,CAAC,IAAI,CAAC;EACzC,MAAMU,qBAAqB,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACY,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;MACvCC,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;MAC5C;IACJ;;IAEA;IACA,MAAMC,GAAG,GAAG,IAAIL,MAAM,CAACC,MAAM,CAACC,IAAI,CAACI,GAAG,CAACT,MAAM,CAACU,OAAO,EAAE;MACnDC,IAAI,EAAE,EAAE;MAAC;MACTC,MAAM,EAAEf,YAAY,IAAID,WAAW,CAAE;IACzC,CAAC,CAAC;;IAEF;IACAK,oBAAoB,CAACS,OAAO,GAAG,IAAIP,MAAM,CAACC,MAAM,CAACC,IAAI,CAACQ,iBAAiB,CAAC,CAAC;IACzEX,qBAAqB,CAACQ,OAAO,GAAG,IAAIP,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,kBAAkB,CAAC,CAAC;IAC3EZ,qBAAqB,CAACQ,OAAO,CAACK,MAAM,CAACP,GAAG,CAAC;;IAEzC;IACA;IACA;IACA;IACA;IACA;IACA,IAAIX,YAAY,IAAID,WAAW,EAAE;MAC7B,MAAMoB,OAAO,GAAG;QACZC,MAAM,EAAEpB,YAAY;QACpBD,WAAW,EAAEA,WAAW;QACxBE,UAAU,EAAEK,MAAM,CAACC,MAAM,CAACC,IAAI,CAACa,UAAU,CAACpB,UAAU,CAAC,CAAE;MAC/D,CAAC;MAEDG,oBAAoB,CAACS,OAAO,CAACS,KAAK,CAACH,OAAO,EAAE,CAACI,MAAM,EAAEC,MAAM,KAAK;QAC5D,IAAIA,MAAM,KAAKlB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACiB,gBAAgB,CAACC,EAAE,EAAE;UACnDrB,qBAAqB,CAACQ,OAAO,CAACc,aAAa,CAACJ,MAAM,CAAC;QACvD,CAAC,MAAM;UACHd,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEc,MAAM,CAAC;QACvD;MACJ,CAAC,CAAC;IACH;EACH,CAAC,EAAE,CAACzB,WAAW,EAAEC,YAAY,EAAEC,UAAU,CAAC,CAAC,CAAC;;EAE5C;EACA,oBAAOJ,OAAA;IAAK+B,GAAG,EAAEzB,MAAO;IAAC0B,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAACjC,EAAA,CAhDIJ,aAAa;AAAAsC,EAAA,GAAbtC,aAAa;AAkDnB,eAAeA,aAAa;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}