{"ast":null,"code":"import { db } from \"./firebase\";\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\n\n// Function to search for buildings in Firestore based on user input\nexport const searchBuildings = async searchQuery => {\n  // If searchQuery is empty, return an empty array\n  if (!searchQuery) return [];\n\n  // Debugging\n  console.log(`ðŸ”Ž Searching for: ${searchQuery}`);\n\n  // Reference to the \"buildings\" collection in Firestore\n  const buildingsRef = collection(db, \"buildings\");\n  // Initialize an empty array to store search results\n  let results = []; // Use an array instead of a Map\n\n  //first search by name or keyword match\n  const keywordQuery = query(buildingsRef,\n  // Searches for keywords in the \"search_keywords\" array field\n  where(\"search_keywords\", \"array-contains\", searchQuery.toLowerCase()));\n\n  // Fetch documents that match the keyword query\n  const keywordSnapshot = await getDocs(keywordQuery);\n  // Loop through retrieved documents and add them to the results array\n  keywordSnapshot.forEach(doc => {\n    if (!results.some(b => b.id === doc.id)) {\n      // Avoid duplicates\n      results.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    }\n  });\n\n  //debugging \n  console.log(`ðŸ“Œ Found ${results.length} results for keywords.`);\n\n  //if no results, search by services offered\n\n  //search by services offered, if no results found in the first search \n  const serviceQuery = query(buildingsRef, where(\"services_offered\", \"array-contains\", searchQuery) // Searches in the \"services_offered\" array field\n  );\n\n  // Fetch documents that match the services query\n  const serviceSnapshot = await getDocs(serviceQuery);\n  // Loop through retrieved documents and add them to the results array\n  serviceSnapshot.forEach(doc => {\n    {/*serviceSnapshot is a collection of Firestore docs retrieved from database & loops through each doc (single building)*/}\n    {/*an array of objects, each object represents a building with its id & data (fields) -> checks if doc.id exists in results array*/}\n    if (!results.some(b => b.id === doc.id)) {\n      // Avoid duplicates -? doc.id exists more than once, don't add it again\n      results.push({\n        id: doc.id,\n        ...doc.data()\n      }); // doc.id retrieves Firestire doc ID & spreads all fields from Firestore doc-> add the building to the results array\n    }\n  });\n\n  //debugging\n  console.log(`âœ… Final Results: ${results.length}`);\n  //return array of matched buildings\n  return results;\n};","map":{"version":3,"names":["db","collection","getDocs","query","where","searchBuildings","searchQuery","console","log","buildingsRef","results","keywordQuery","toLowerCase","keywordSnapshot","forEach","doc","some","b","id","push","data","length","serviceQuery","serviceSnapshot"],"sources":["C:/Users/shaylan/Documents/01 Capstone/CC Website/capstone-project-campusconnect-team/src/services/firestoreSearchService.js"],"sourcesContent":["import { db } from \"./firebase\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\n\r\n// Function to search for buildings in Firestore based on user input\r\nexport const searchBuildings = async (searchQuery) => {\r\n    // If searchQuery is empty, return an empty array\r\n    if (!searchQuery) return [];\r\n\r\n    // Debugging\r\n    console.log(`ðŸ”Ž Searching for: ${searchQuery}`);\r\n\r\n    // Reference to the \"buildings\" collection in Firestore\r\n    const buildingsRef = collection(db, \"buildings\");\r\n    // Initialize an empty array to store search results\r\n    let results = []; // Use an array instead of a Map\r\n\r\n    //first search by name or keyword match\r\n    const keywordQuery = query(\r\n        buildingsRef,\r\n        // Searches for keywords in the \"search_keywords\" array field\r\n        where(\"search_keywords\", \"array-contains\", searchQuery.toLowerCase())\r\n    );\r\n\r\n    // Fetch documents that match the keyword query\r\n    const keywordSnapshot = await getDocs(keywordQuery);\r\n    // Loop through retrieved documents and add them to the results array\r\n    keywordSnapshot.forEach((doc) => { \r\n        if (!results.some((b) => b.id === doc.id)) { // Avoid duplicates\r\n            results.push({ id: doc.id, ...doc.data() });\r\n        }\r\n    });\r\n\r\n    //debugging \r\n    console.log(`ðŸ“Œ Found ${results.length} results for keywords.`);\r\n\r\n    //if no results, search by services offered\r\n    \r\n        //search by services offered, if no results found in the first search \r\n        const serviceQuery = query(\r\n            buildingsRef,\r\n            where(\"services_offered\", \"array-contains\", searchQuery)  // Searches in the \"services_offered\" array field\r\n        );\r\n\r\n        // Fetch documents that match the services query\r\n        const serviceSnapshot = await getDocs(serviceQuery);\r\n        // Loop through retrieved documents and add them to the results array\r\n        serviceSnapshot.forEach((doc) => { {/*serviceSnapshot is a collection of Firestore docs retrieved from database & loops through each doc (single building)*/ }\r\n            {/*an array of objects, each object represents a building with its id & data (fields) -> checks if doc.id exists in results array*/ }\r\n            if (!results.some((b) => b.id === doc.id)) { // Avoid duplicates -? doc.id exists more than once, don't add it again\r\n                results.push({ id: doc.id, ...doc.data() }); // doc.id retrieves Firestire doc ID & spreads all fields from Firestore doc-> add the building to the results array\r\n            }        \r\n        });\r\n    \r\n    //debugging\r\n    console.log(`âœ… Final Results: ${results.length}`);\r\n    //return array of matched buildings\r\n    return results;\r\n\r\n    \r\n};\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,YAAY;AAC/B,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;;AAEtE;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,WAAW,IAAK;EAClD;EACA,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;;EAE3B;EACAC,OAAO,CAACC,GAAG,CAAC,qBAAqBF,WAAW,EAAE,CAAC;;EAE/C;EACA,MAAMG,YAAY,GAAGR,UAAU,CAACD,EAAE,EAAE,WAAW,CAAC;EAChD;EACA,IAAIU,OAAO,GAAG,EAAE,CAAC,CAAC;;EAElB;EACA,MAAMC,YAAY,GAAGR,KAAK,CACtBM,YAAY;EACZ;EACAL,KAAK,CAAC,iBAAiB,EAAE,gBAAgB,EAAEE,WAAW,CAACM,WAAW,CAAC,CAAC,CACxE,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG,MAAMX,OAAO,CAACS,YAAY,CAAC;EACnD;EACAE,eAAe,CAACC,OAAO,CAAEC,GAAG,IAAK;IAC7B,IAAI,CAACL,OAAO,CAACM,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,EAAE;MAAE;MACzCR,OAAO,CAACS,IAAI,CAAC;QAAED,EAAE,EAAEH,GAAG,CAACG,EAAE;QAAE,GAAGH,GAAG,CAACK,IAAI,CAAC;MAAE,CAAC,CAAC;IAC/C;EACJ,CAAC,CAAC;;EAEF;EACAb,OAAO,CAACC,GAAG,CAAC,YAAYE,OAAO,CAACW,MAAM,wBAAwB,CAAC;;EAE/D;;EAEI;EACA,MAAMC,YAAY,GAAGnB,KAAK,CACtBM,YAAY,EACZL,KAAK,CAAC,kBAAkB,EAAE,gBAAgB,EAAEE,WAAW,CAAC,CAAE;EAC9D,CAAC;;EAED;EACA,MAAMiB,eAAe,GAAG,MAAMrB,OAAO,CAACoB,YAAY,CAAC;EACnD;EACAC,eAAe,CAACT,OAAO,CAAEC,GAAG,IAAK;IAAE,CAAC;IAChC,CAAC;IACD,IAAI,CAACL,OAAO,CAACM,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKH,GAAG,CAACG,EAAE,CAAC,EAAE;MAAE;MACzCR,OAAO,CAACS,IAAI,CAAC;QAAED,EAAE,EAAEH,GAAG,CAACG,EAAE;QAAE,GAAGH,GAAG,CAACK,IAAI,CAAC;MAAE,CAAC,CAAC,CAAC,CAAC;IACjD;EACJ,CAAC,CAAC;;EAEN;EACAb,OAAO,CAACC,GAAG,CAAC,oBAAoBE,OAAO,CAACW,MAAM,EAAE,CAAC;EACjD;EACA,OAAOX,OAAO;AAGlB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}