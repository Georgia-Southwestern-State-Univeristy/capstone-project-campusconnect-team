{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sophia\\\\Downloads\\\\Spring 2025\\\\Capstone Project\\\\CampusConnect_1\\\\capstone-project-campusconnect-team\\\\src\\\\pages\\\\MapNavigation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport '../pages/App.css'; // Adjust the path if necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"MapNavigation re-rendered\");\nconst MapNavigation = ({\n  destination,\n  userLocation,\n  travelMode,\n  onRouteCalculated\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const directionsServiceRef = useRef(null);\n  const directionsRendererRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const originMarkerRef = useRef(null);\n  const destinationMarkerRef = useRef(null);\n\n  //initalize map & directions services only once \n  useEffect(() => {\n    console.log(\"Initializing map...\");\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps API not loaded.\");\n      return;\n    }\n    if (!mapInstanceRef.current) {\n      mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n        zoom: 16,\n        center: userLocation || destination,\n        disableDefaultUI: false // Prevents UI flickering\n      });\n      console.log(\"Map initialized:\", mapInstanceRef.current);\n\n      // Initialize DirectionsService and DirectionsRenderer only once\n      directionsServiceRef.current = new window.google.maps.DirectionsService();\n      directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n      directionsRendererRef.current.setMap(mapInstanceRef.current);\n    }\n  }, []);\n\n  // Ensure markers are created only once and update their positions\n  useEffect(() => {\n    if (!mapInstanceRef.current) return;\n    if (!originMarkerRef.current) {\n      originMarkerRef.current = new window.google.maps.Marker({\n        position: userLocation,\n        map: mapInstanceRef.current,\n        title: \"Your Location\",\n        label: \"A\"\n      });\n    } else {\n      originMarkerRef.current.setPosition(userLocation);\n    }\n    if (!destinationMarkerRef.current) {\n      destinationMarkerRef.current = new window.google.maps.Marker({\n        position: destination,\n        map: mapInstanceRef.current,\n        title: \"Destination\",\n        label: \"B\"\n      });\n    } else {\n      destinationMarkerRef.current.setPosition(destination);\n    }\n  }, [userLocation, destination]); // Only update markers if location changes\n\n  //     // Cleanup function to avoid memory leaks\n  //     return () => {\n  //         if (directionsRendererRef.current) {\n  //             directionsRendererRef.current.setMap(null);\n  //         }\n  //     };\n  // }, [userLocation, destination]);//only rerun if userLocation or destination changes\n\n  // Calculate and display the route\n  // ✅ Optimize route calculation\n  const calculateRoute = useCallback(() => {\n    if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n      return;\n    }\n    console.log(\"📍 Calculating route...\");\n    const request = {\n      origin: userLocation,\n      destination: destination,\n      travelMode: window.google.maps.TravelMode[travelMode]\n    };\n    directionsServiceRef.current.route(request, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        directionsRendererRef.current.setDirections(result);\n\n        // Extract distance and duration\n        const route = result.routes[0].legs[0];\n        const distance = route.distance.text;\n        const duration = route.duration.text;\n\n        // Pass distance and duration back to the parent component\n        if (onRouteCalculated) {\n          onRouteCalculated({\n            [travelMode.toLowerCase()]: {\n              distance,\n              duration\n            }\n          });\n        }\n      } else {\n        console.error(\"Directions request failed:\", status);\n      }\n    });\n  }, [travelMode, userLocation, destination, onRouteCalculated]);\n\n  // ✅ Call route calculation when travelMode changes\n  useEffect(() => {\n    calculateRoute();\n  }, [calculateRoute]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 12\n  }, this);\n};\n_s(MapNavigation, \"pI1zCxOu3hXxTVLM02pOss1ZVx4=\");\n_c = MapNavigation;\nexport default MapNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapNavigation\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","console","log","MapNavigation","destination","userLocation","travelMode","onRouteCalculated","_s","mapRef","directionsServiceRef","directionsRendererRef","mapInstanceRef","originMarkerRef","destinationMarkerRef","window","google","maps","error","current","Map","zoom","center","disableDefaultUI","DirectionsService","DirectionsRenderer","setMap","Marker","position","map","title","label","setPosition","calculateRoute","request","origin","TravelMode","route","result","status","DirectionsStatus","OK","setDirections","routes","legs","distance","text","duration","toLowerCase","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_1/capstone-project-campusconnect-team/src/pages/MapNavigation.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from \"react\";\nimport '../pages/App.css'; // Adjust the path if necessary\n\nconsole.log(\"MapNavigation re-rendered\");\nconst MapNavigation = ({ destination, userLocation, travelMode, onRouteCalculated }) => {\n    const mapRef = useRef(null);\n    const directionsServiceRef = useRef(null);\n    const directionsRendererRef = useRef(null);\n    const mapInstanceRef = useRef(null);\n    const originMarkerRef = useRef(null);\n    const destinationMarkerRef = useRef(null);\n\n\n    //initalize map & directions services only once \n    useEffect(() => {\n        console.log(\"Initializing map...\");\n        if (!window.google || !window.google.maps) {\n            console.error(\"Google Maps API not loaded.\");\n            return;\n        }\n\n        if (!mapInstanceRef.current) {\n            mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n                zoom: 16,\n                center: userLocation || destination,\n                disableDefaultUI: false, // Prevents UI flickering\n            });\n\n        console.log(\"Map initialized:\", mapInstanceRef.current);\n\n        // Initialize DirectionsService and DirectionsRenderer only once\n        directionsServiceRef.current = new window.google.maps.DirectionsService();\n        directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n        directionsRendererRef.current.setMap(mapInstanceRef.current);\n        }\n    }, []);\n\n        // Ensure markers are created only once and update their positions\n        useEffect(() => {\n            if (!mapInstanceRef.current) return;\n\n            if (!originMarkerRef.current) {\n                originMarkerRef.current = new window.google.maps.Marker({\n                    position: userLocation,\n                    map: mapInstanceRef.current,\n                    title: \"Your Location\",\n                    label: \"A\",\n                });\n            } else {\n                originMarkerRef.current.setPosition(userLocation);\n            }\n\n            if (!destinationMarkerRef.current) {\n                destinationMarkerRef.current = new window.google.maps.Marker({\n                    position: destination,\n                    map: mapInstanceRef.current,\n                    title: \"Destination\",\n                    label: \"B\",\n                });\n            } else {\n                destinationMarkerRef.current.setPosition(destination);\n            }\n\n        }, [userLocation, destination]); // Only update markers if location changes\n\n    //     // Cleanup function to avoid memory leaks\n    //     return () => {\n    //         if (directionsRendererRef.current) {\n    //             directionsRendererRef.current.setMap(null);\n    //         }\n    //     };\n    // }, [userLocation, destination]);//only rerun if userLocation or destination changes\n\n    // Calculate and display the route\n    // ✅ Optimize route calculation\n        const calculateRoute = useCallback(() => {\n            if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n                return;\n            }\n\n            console.log(\"📍 Calculating route...\");\n            const request = {\n                origin: userLocation,\n                destination: destination,\n                travelMode: window.google.maps.TravelMode[travelMode],\n            };\n\n            directionsServiceRef.current.route(request, (result, status) => {\n                if (status === window.google.maps.DirectionsStatus.OK) {\n                    directionsRendererRef.current.setDirections(result);\n\n                    // Extract distance and duration\n                    const route = result.routes[0].legs[0];\n                    const distance = route.distance.text;\n                    const duration = route.duration.text;\n\n                    // Pass distance and duration back to the parent component\n                    if (onRouteCalculated) {\n                        onRouteCalculated({[travelMode.toLowerCase()]: { distance, duration }});\n                    }\n                } else {\n                    console.error(\"Directions request failed:\", status);\n                }\n            });\n        \n        }, [travelMode, userLocation, destination, onRouteCalculated]);\n\n    // ✅ Call route calculation when travelMode changes\n    useEffect(() => {\n        calculateRoute();\n    }, [calculateRoute]);\n\n    return <div ref={mapRef} className=\"map-container\" />;\n};\n\nexport default MapNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}