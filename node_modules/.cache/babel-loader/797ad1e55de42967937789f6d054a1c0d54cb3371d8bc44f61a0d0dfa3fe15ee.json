{"ast":null,"code":"import { db } from \"./firebase\";\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\n\n/**\r\n * Search buildings by user input query.\r\n * Matches building_name, search_keywords, or services_offered.\r\n */\nexport const searchBuildings = async searchQuery => {\n  if (!searchQuery) return []; // Don't search if query is empty\n\n  const buildingsRef = collection(db, \"buildings\");\n  let results = [];\n\n  // 🔹 Firestore query to search by exact keyword match\n  const keywordQuery = query(buildingsRef, where(\"search_keywords\", \"array-contains\", searchQuery.toLowerCase()) // Case-insensitive search\n  );\n  const keywordSnapshot = await getDocs(keywordQuery);\n  keywordSnapshot.forEach(doc => {\n    results.push({\n      id: doc.id,\n      ...doc.data()\n    });\n  });\n\n  // ✅ Direct Navigation if only ONE match is found\n  if (results.length === 1) {\n    return results;\n  }\n\n  // 🔹 Fallback: Search by building_name (partial match)\n  if (results.length === 0) {\n    console.log(`🔍 No exact matches for '${searchQuery}', trying partial match...`);\n    const nameQuery = query(buildingsRef, where(\"building_name\", \">=\", searchQuery), where(\"building_name\", \"<=\", searchQuery + \"\\uf8ff\"));\n    const nameSnapshot = await getDocs(nameQuery);\n    nameSnapshot.forEach(doc => {\n      results.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n  }\n\n  // ✅ Direct Navigation if only ONE match is found after fallback\n  if (results.length === 1) {\n    return results;\n  }\n\n  // 🔹 Fallback: Search services_offered (PARTIAL MATCH included)\n  if (results.length === 0) {\n    console.log(`🔍 No name matches for '${searchQuery}', searching by services...`);\n    const allDocs = await getDocs(buildingsRef);\n    allDocs.forEach(doc => {\n      var _data$services_offere;\n      const data = doc.data();\n      if ((_data$services_offere = data.services_offered) !== null && _data$services_offere !== void 0 && _data$services_offere.some(service => service.toLowerCase().includes(searchQuery.toLowerCase()))) {\n        results.push({\n          id: doc.id,\n          ...data\n        });\n      }\n    });\n  }\n  return results;\n};","map":{"version":3,"names":["db","collection","getDocs","query","where","searchBuildings","searchQuery","buildingsRef","results","keywordQuery","toLowerCase","keywordSnapshot","forEach","doc","push","id","data","length","console","log","nameQuery","nameSnapshot","allDocs","_data$services_offere","services_offered","some","service","includes"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_/CampusConnect/src/services/firestoreSearchService.js"],"sourcesContent":["import { db } from \"./firebase\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\n\r\n/**\r\n * Search buildings by user input query.\r\n * Matches building_name, search_keywords, or services_offered.\r\n */\r\nexport const searchBuildings = async (searchQuery) => {\r\n    if (!searchQuery) return []; // Don't search if query is empty\r\n\r\n    const buildingsRef = collection(db, \"buildings\");\r\n    let results = [];\r\n\r\n    // 🔹 Firestore query to search by exact keyword match\r\n    const keywordQuery = query(\r\n        buildingsRef,\r\n        where(\"search_keywords\", \"array-contains\", searchQuery.toLowerCase()) // Case-insensitive search\r\n    );\r\n\r\n    const keywordSnapshot = await getDocs(keywordQuery);\r\n    keywordSnapshot.forEach((doc) => {\r\n        results.push({ id: doc.id, ...doc.data() });\r\n    });\r\n\r\n    // ✅ Direct Navigation if only ONE match is found\r\n    if (results.length === 1) {\r\n        return results;\r\n    }\r\n\r\n    // 🔹 Fallback: Search by building_name (partial match)\r\n    if (results.length === 0) {\r\n        console.log(`🔍 No exact matches for '${searchQuery}', trying partial match...`);\r\n        const nameQuery = query(\r\n            buildingsRef,\r\n            where(\"building_name\", \">=\", searchQuery),\r\n            where(\"building_name\", \"<=\", searchQuery + \"\\uf8ff\")\r\n        );\r\n\r\n        const nameSnapshot = await getDocs(nameQuery);\r\n        nameSnapshot.forEach((doc) => {\r\n            results.push({ id: doc.id, ...doc.data() });\r\n        });\r\n    }\r\n\r\n    // ✅ Direct Navigation if only ONE match is found after fallback\r\n    if (results.length === 1) {\r\n        return results;\r\n    }\r\n\r\n    // 🔹 Fallback: Search services_offered (PARTIAL MATCH included)\r\n    if (results.length === 0) {\r\n        console.log(`🔍 No name matches for '${searchQuery}', searching by services...`);\r\n        \r\n        const allDocs = await getDocs(buildingsRef);\r\n        allDocs.forEach((doc) => {\r\n            const data = doc.data();\r\n            if (data.services_offered?.some(service => service.toLowerCase().includes(searchQuery.toLowerCase()))) {\r\n                results.push({ id: doc.id, ...data });\r\n            }\r\n        });\r\n    }\r\n\r\n    return results;\r\n};\r\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,YAAY;AAC/B,SAASC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;;AAEtE;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOC,WAAW,IAAK;EAClD,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE,CAAC,CAAC;;EAE7B,MAAMC,YAAY,GAAGN,UAAU,CAACD,EAAE,EAAE,WAAW,CAAC;EAChD,IAAIQ,OAAO,GAAG,EAAE;;EAEhB;EACA,MAAMC,YAAY,GAAGN,KAAK,CACtBI,YAAY,EACZH,KAAK,CAAC,iBAAiB,EAAE,gBAAgB,EAAEE,WAAW,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,MAAMC,eAAe,GAAG,MAAMT,OAAO,CAACO,YAAY,CAAC;EACnDE,eAAe,CAACC,OAAO,CAAEC,GAAG,IAAK;IAC7BL,OAAO,CAACM,IAAI,CAAC;MAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;MAAE,GAAGF,GAAG,CAACG,IAAI,CAAC;IAAE,CAAC,CAAC;EAC/C,CAAC,CAAC;;EAEF;EACA,IAAIR,OAAO,CAACS,MAAM,KAAK,CAAC,EAAE;IACtB,OAAOT,OAAO;EAClB;;EAEA;EACA,IAAIA,OAAO,CAACS,MAAM,KAAK,CAAC,EAAE;IACtBC,OAAO,CAACC,GAAG,CAAC,4BAA4Bb,WAAW,4BAA4B,CAAC;IAChF,MAAMc,SAAS,GAAGjB,KAAK,CACnBI,YAAY,EACZH,KAAK,CAAC,eAAe,EAAE,IAAI,EAAEE,WAAW,CAAC,EACzCF,KAAK,CAAC,eAAe,EAAE,IAAI,EAAEE,WAAW,GAAG,QAAQ,CACvD,CAAC;IAED,MAAMe,YAAY,GAAG,MAAMnB,OAAO,CAACkB,SAAS,CAAC;IAC7CC,YAAY,CAACT,OAAO,CAAEC,GAAG,IAAK;MAC1BL,OAAO,CAACM,IAAI,CAAC;QAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;QAAE,GAAGF,GAAG,CAACG,IAAI,CAAC;MAAE,CAAC,CAAC;IAC/C,CAAC,CAAC;EACN;;EAEA;EACA,IAAIR,OAAO,CAACS,MAAM,KAAK,CAAC,EAAE;IACtB,OAAOT,OAAO;EAClB;;EAEA;EACA,IAAIA,OAAO,CAACS,MAAM,KAAK,CAAC,EAAE;IACtBC,OAAO,CAACC,GAAG,CAAC,2BAA2Bb,WAAW,6BAA6B,CAAC;IAEhF,MAAMgB,OAAO,GAAG,MAAMpB,OAAO,CAACK,YAAY,CAAC;IAC3Ce,OAAO,CAACV,OAAO,CAAEC,GAAG,IAAK;MAAA,IAAAU,qBAAA;MACrB,MAAMP,IAAI,GAAGH,GAAG,CAACG,IAAI,CAAC,CAAC;MACvB,KAAAO,qBAAA,GAAIP,IAAI,CAACQ,gBAAgB,cAAAD,qBAAA,eAArBA,qBAAA,CAAuBE,IAAI,CAACC,OAAO,IAAIA,OAAO,CAAChB,WAAW,CAAC,CAAC,CAACiB,QAAQ,CAACrB,WAAW,CAACI,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QACnGF,OAAO,CAACM,IAAI,CAAC;UAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;UAAE,GAAGC;QAAK,CAAC,CAAC;MACzC;IACJ,CAAC,CAAC;EACN;EAEA,OAAOR,OAAO;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}