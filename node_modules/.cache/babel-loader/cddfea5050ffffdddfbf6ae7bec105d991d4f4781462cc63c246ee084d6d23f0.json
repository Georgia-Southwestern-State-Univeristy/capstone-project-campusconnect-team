{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sophia\\\\Downloads\\\\Spring 2025\\\\Capstone Project\\\\CampusConnect_1\\\\capstone-project-campusconnect-team\\\\src\\\\pages\\\\MapNavigation.js\",\n  _s = $RefreshSig$();\n{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapNavigation = ({\n  destination,\n  userLocation,\n  travelMode,\n  onRouteCalculated\n}) => {\n  _s();\n  // Create a reference to the map div element\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null); //store map instance \n  const directionsServiceRef = useRef(null);\n  const directionsRendererRef = useRef(null);\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps API not loaded.\");\n      return;\n    }\n\n    //initialize google maps & center on destination\n    if (!mapInstanceRef.current) {\n      // Initialize the map **ONLY ONCE**\n      const newMap = new window.google.maps.Map(mapRef.current, {\n        zoom: 16,\n        center: userLocation || destination\n      });\n      mapInstanceRef.current = newMap; // Store map instance\n\n      //create services for directions and rendering\n      directionsServiceRef.current = new window.google.maps.DirectionsService();\n      directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n      directionsRendererRef.current.setMap(map);\n    }\n\n    // Cleanup function to avoid memory leaks\n    return () => {\n      if (directionsRendererRef.current) {\n        directionsRendererRef.current.setMap(null); // Remove the renderer from the map\n      }\n    };\n  }, [userLocation, destination]); // Only re-run if userLocation or destination changes\n\n  // //request user's location as lat & long coordinates\n  // navigator.geolocation.getCurrentPosition((position) => {\n  //     const userLocation = {\n  //         lat: position.coords.latitude,\n  //         lng: position.coords.longitude,\n  //     };\n\n  // Calculate and display the route\n  useEffect(() => {\n    if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n      return;\n    }\n    const request = {\n      origin: userLocation,\n      destination: destination,\n      travelMode: window.google.maps.TravelMode[travelMode]\n    };\n    directionsServiceRef.current.route(request, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        directionsRendererRef.current.setDirections(result);\n\n        // Extract distance and duration\n        const route = result.routes[0].legs[0];\n        const distance = route.distance.text;\n        const duration = route.duration.text;\n\n        //check if 'onRouteCaclulated' exists before calling \n        if (onRouteCalculated) {\n          // Pass distance and duration back to parent component\n          onRouteCalculated({\n            [travelMode.toLowerCase()]: {\n              distance,\n              duration\n            }\n          });\n        }\n      } else {\n        console.error(\"Directions request failed:\", status);\n      }\n    });\n  }, [userLocation, destination, travelMode, onRouteCalculated]); // Re-run effect if `userLocation` or `destination` changes\n\n  //map div to display map\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 12\n  }, this);\n};\n_s(MapNavigation, \"AKLb30PT0knRzOxDH4uM9GThKxU=\");\n_c = MapNavigation;\nexport default MapNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapNavigation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","MapNavigation","destination","userLocation","travelMode","onRouteCalculated","_s","mapRef","mapInstanceRef","directionsServiceRef","directionsRendererRef","window","google","maps","console","error","current","newMap","Map","zoom","center","DirectionsService","DirectionsRenderer","setMap","map","request","origin","TravelMode","route","result","status","DirectionsStatus","OK","setDirections","routes","legs","distance","text","duration","toLowerCase","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_1/capstone-project-campusconnect-team/src/pages/MapNavigation.js"],"sourcesContent":["{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\n\nconst MapNavigation = ({  destination, userLocation, travelMode, onRouteCalculated  }) => {\n    // Create a reference to the map div element\n    const mapRef = useRef(null);\n    const mapInstanceRef = useRef(null); //store map instance \n    const directionsServiceRef = useRef(null);\n    const directionsRendererRef = useRef(null);\n\n    useEffect(() => {\n        if (!window.google || !window.google.maps) {\n            console.error(\"Google Maps API not loaded.\");\n            return;\n        }\n\n        //initialize google maps & center on destination\n        if (!mapInstanceRef.current) {\n            // Initialize the map **ONLY ONCE**\n            const newMap = new window.google.maps.Map(mapRef.current, {\n                zoom: 16,\n                center: userLocation || destination,\n            });\n\n            mapInstanceRef.current = newMap; // Store map instance\n\n            //create services for directions and rendering\n            directionsServiceRef.current = new window.google.maps.DirectionsService();\n            directionsRendererRef.current = new window.google.maps.DirectionsRenderer();\n            directionsRendererRef.current.setMap(map);\n        }\n\n        // Cleanup function to avoid memory leaks\n        return () => {\n            if (directionsRendererRef.current) {\n                directionsRendererRef.current.setMap(null); // Remove the renderer from the map\n            }\n        };\n    }, [userLocation, destination]); // Only re-run if userLocation or destination changes\n\n        // //request user's location as lat & long coordinates\n        // navigator.geolocation.getCurrentPosition((position) => {\n        //     const userLocation = {\n        //         lat: position.coords.latitude,\n        //         lng: position.coords.longitude,\n        //     };\n        \n        // Calculate and display the route\n        useEffect(() => {\n            if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n                return;\n            }\n            \n            const request = {\n                origin: userLocation,\n                destination: destination,\n                travelMode: window.google.maps.TravelMode[travelMode],\n            };\n    \n\n\n\n        directionsServiceRef.current.route(request, (result, status) => {\n            if (status === window.google.maps.DirectionsStatus.OK) {\n                directionsRendererRef.current.setDirections(result);\n\n                // Extract distance and duration\n                const route = result.routes[0].legs[0];\n                const distance = route.distance.text;\n                const duration = route.duration.text;\n\n                //check if 'onRouteCaclulated' exists before calling \n                if (onRouteCalculated){\n                    // Pass distance and duration back to parent component\n                    onRouteCalculated({[travelMode.toLowerCase()]: { distance, duration } });\n                }\n\n            } else {\n                console.error(\"Directions request failed:\", status);\n            }\n        });\n    \n    }, [userLocation, destination, travelMode, onRouteCalculated]);// Re-run effect if `userLocation` or `destination` changes\n\n    //map div to display map\n    return <div ref={mapRef} style={{ width: \"100%\", height: \"100%\" }} />;\n};\n\nexport default MapNavigation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}