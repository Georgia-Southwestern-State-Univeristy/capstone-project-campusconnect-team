{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sophia\\\\Downloads\\\\Spring 2025\\\\Capstone Project\\\\CampusConnect_1\\\\capstone-project-campusconnect-team\\\\src\\\\pages\\\\MapNavigation.js\",\n  _s = $RefreshSig$();\n{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapNavigation = ({\n  destination,\n  userLocation\n}) => {\n  _s();\n  // Create a reference to the map div element\n  const mapRef = useRef(null);\n  useEffect(() => {\n    // Check if Google Maps API is loaded\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps API is not loaded.\");\n      return;\n    }\n    if (!userLocation || !destination) return; // Exit if user location isn't available\n\n    //initialize google maps & center on destination\n    const map = new window.google.maps.Map(mapRef.current, {\n      zoom: 16,\n      //default zoom level\n      center: destination //center map on destination\n    });\n\n    //create services for directions and rendering\n    const directionsService = new window.google.maps.DirectionsService();\n    const directionsRenderer = new window.google.maps.DirectionsRenderer();\n    directionsRenderer.setMap(map); //atatch render to map \n\n    // //request user's location as lat & long coordinates\n    // navigator.geolocation.getCurrentPosition((position) => {\n    //     const userLocation = {\n    //         lat: position.coords.latitude,\n    //         lng: position.coords.longitude,\n    //     };\n\n    //request directions from user's location to destination\n    directionsService.route({\n      origin: userLocation,\n      //user's location\n      destination,\n      //building location\n      travelMode: window.google.maps.TravelMode.WALKING // Walking for campus paths\n    }, (result, status) => {\n      if (status === \"OK\") {\n        //directions are found, render on map\n        directionsRenderer.setDirections(result);\n      } else {\n        //error fetching directions if google maps API fails to find route \n        console.error(\"Error fetching directions:\", status);\n      }\n    });\n    // );\n  }, [destination, userLocation]); // Re-run effect if `userLocation` or `destination` changes\n\n  //map div to display map\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"500px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n};\n_s(MapNavigation, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = MapNavigation;\nexport default MapNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapNavigation\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","MapNavigation","destination","userLocation","_s","mapRef","window","google","maps","console","error","map","Map","current","zoom","center","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","setMap","route","origin","travelMode","TravelMode","WALKING","result","status","setDirections","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_1/capstone-project-campusconnect-team/src/pages/MapNavigation.js"],"sourcesContent":["{/*display google map with directions from user's location to destination*/}\n// Import the functions needed from the SDKs \nimport React, { useEffect, useRef } from \"react\";\n\nconst MapNavigation = ({  destination, userLocation  }) => {\n    // Create a reference to the map div element\n    const mapRef = useRef(null);\n\n    useEffect(() => {\n        // Check if Google Maps API is loaded\n        if (!window.google || !window.google.maps) {\n            console.error(\"Google Maps API is not loaded.\");\n            return;\n        }\n\n        if (!userLocation || !destination) return; // Exit if user location isn't available\n\n        //initialize google maps & center on destination\n        const map = new window.google.maps.Map(mapRef.current, {\n            zoom: 16,//default zoom level\n            center: destination, //center map on destination\n        });\n\n        //create services for directions and rendering\n        const directionsService = new window.google.maps.DirectionsService();\n        const directionsRenderer = new window.google.maps.DirectionsRenderer();\n        directionsRenderer.setMap(map); //atatch render to map \n\n        // //request user's location as lat & long coordinates\n        // navigator.geolocation.getCurrentPosition((position) => {\n        //     const userLocation = {\n        //         lat: position.coords.latitude,\n        //         lng: position.coords.longitude,\n        //     };\n\n            //request directions from user's location to destination\n            directionsService.route(\n                {\n                    origin: userLocation, //user's location\n                    destination, //building location\n                    travelMode: window.google.maps.TravelMode.WALKING, // Walking for campus paths\n                },\n                (result, status) => {\n                    if (status === \"OK\") {\n                        //directions are found, render on map\n                        directionsRenderer.setDirections(result);\n                    } else {\n                        //error fetching directions if google maps API fails to find route \n                        console.error(\"Error fetching directions:\", status);\n                    }\n                }\n            );\n        // );\n    }, [destination, userLocation]);// Re-run effect if `userLocation` or `destination` changes\n\n    //map div to display map\n    return <div ref={mapRef} style={{ width: \"100%\", height: \"500px\" }} />;\n};\n\nexport default MapNavigation;\n"],"mappings":";;AAAA,CAAC;AACD;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,aAAa,GAAGA,CAAC;EAAGC,WAAW;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACvD;EACA,MAAMC,MAAM,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACZ;IACA,IAAI,CAACS,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACC,MAAM,CAACC,IAAI,EAAE;MACvCC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;IACJ;IAEA,IAAI,CAACP,YAAY,IAAI,CAACD,WAAW,EAAE,OAAO,CAAC;;IAE3C;IACA,MAAMS,GAAG,GAAG,IAAIL,MAAM,CAACC,MAAM,CAACC,IAAI,CAACI,GAAG,CAACP,MAAM,CAACQ,OAAO,EAAE;MACnDC,IAAI,EAAE,EAAE;MAAC;MACTC,MAAM,EAAEb,WAAW,CAAE;IACzB,CAAC,CAAC;;IAEF;IACA,MAAMc,iBAAiB,GAAG,IAAIV,MAAM,CAACC,MAAM,CAACC,IAAI,CAACS,iBAAiB,CAAC,CAAC;IACpE,MAAMC,kBAAkB,GAAG,IAAIZ,MAAM,CAACC,MAAM,CAACC,IAAI,CAACW,kBAAkB,CAAC,CAAC;IACtED,kBAAkB,CAACE,MAAM,CAACT,GAAG,CAAC,CAAC,CAAC;;IAEhC;IACA;IACA;IACA;IACA;IACA;;IAEI;IACAK,iBAAiB,CAACK,KAAK,CACnB;MACIC,MAAM,EAAEnB,YAAY;MAAE;MACtBD,WAAW;MAAE;MACbqB,UAAU,EAAEjB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACgB,UAAU,CAACC,OAAO,CAAE;IACvD,CAAC,EACD,CAACC,MAAM,EAAEC,MAAM,KAAK;MAChB,IAAIA,MAAM,KAAK,IAAI,EAAE;QACjB;QACAT,kBAAkB,CAACU,aAAa,CAACF,MAAM,CAAC;MAC5C,CAAC,MAAM;QACH;QACAjB,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEiB,MAAM,CAAC;MACvD;IACJ,CACJ,CAAC;IACL;EACJ,CAAC,EAAE,CAACzB,WAAW,EAAEC,YAAY,CAAC,CAAC,CAAC;;EAEhC;EACA,oBAAOH,OAAA;IAAK6B,GAAG,EAAExB,MAAO;IAACyB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAAChC,EAAA,CArDIH,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAuDnB,eAAeA,aAAa;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}