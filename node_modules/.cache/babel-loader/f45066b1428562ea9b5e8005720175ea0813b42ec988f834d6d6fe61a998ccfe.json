{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sophia\\\\Downloads\\\\Spring 2025\\\\Capstone Project\\\\CampusConnect_1\\\\capstone-project-campusconnect-team\\\\src\\\\pages\\\\MapNavigation.js\",\n  _s = $RefreshSig$();\n//\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport '../pages/App.css'; // path to import css file for map styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"MapNavigation re-rendered\"); //debugging log to see if component re-renders\n//MapNavigation component that takes in destination, userLocation, travelMode, and onRouteCalculated as props to display with google maps\nconst MapNavigation = ({\n  destination,\n  userLocation,\n  travelMode,\n  onRouteCalculated\n}) => {\n  _s();\n  //referencefs for Google Maps API elements \n  const mapRef = useRef(null); //reference to map container\n  const directionsServiceRef = useRef(null); //reference to directions service\n  const directionsRendererRef = useRef(null); //reference to directions renderer\n  const mapInstanceRef = useRef(null); //reference to store map instance\n  const originMarkerRef = useRef(null); //reference to origin marker\n  const destinationMarkerRef = useRef(null); //reference to destination marker\n\n  //initalize map & directions services only once \n  useEffect(() => {\n    console.log(\"Initializing map...\");\n    //check if google maps API is loaded\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps API not loaded.\");\n      return;\n    }\n\n    //make & store map instance if not yet initialized \n    if (!mapInstanceRef.current) {\n      mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n        zoom: 16,\n        //default zoom level\n        center: userLocation || destination,\n        //center map on userLocation or destination\n        disableDefaultUI: false // Prevents UI flickering -> disable default controls\n      });\n      console.log(\"Map initialized:\", mapInstanceRef.current);\n\n      // Initialize DirectionsService and DirectionsRenderer only once\n      directionsServiceRef.current = new window.google.maps.DirectionsService();\n      directionsRendererRef.current = new window.google.maps.DirectionsRenderer({\n        suppressMarkers: true // Prevents automatic markers (fixes flickering)\n      });\n      //set directions render to use our created map instance\n      directionsRendererRef.current.setMap(mapInstanceRef.current);\n    }\n  }, []); //only run once\n\n  // Ensure markers are created only once and update their positions\n  useEffect(() => {\n    if (!mapInstanceRef.current) return; // Exit if map is not initialized\n\n    let AdvancedMarkerElement;\n    try {\n      AdvancedMarkerElement = google.maps.marker.AdvancedMarkerElement; //use advanced marker element\n    } catch (e) {\n      console.warn(\"⚠️ AdvancedMarkerElement not available. Falling back to google.maps.Marker.\");\n    }\n\n    // **Use location marker (A) **\n    if (!originMarkerRef.current && userLocation) {\n      originMarkerRef.current = AdvancedMarkerElement ? new AdvancedMarkerElement({\n        position: userLocation,\n        map: mapInstanceRef.current,\n        title: \"Your Location\",\n        text: \"A\" // Label for the marker\n      }) : new google.maps.Marker({\n        position: userLocation,\n        map: mapInstanceRef.current,\n        title: \"Your Location\",\n        label: \"A\" //fall back to label if advanced marker not available\n      });\n    } else if (originMarkerRef.current) {\n      originMarkerRef.current.setPosition(userLocation); //update marker position if already created \n    }\n\n    /* **Use destination marker (B) ** */\n    if (!destinationMarkerRef.current && destination) {\n      destinationMarkerRef.current = AdvancedMarkerElement ? new AdvancedMarkerElement({\n        position: destination,\n        map: mapInstanceRef.current,\n        title: \"Destination\",\n        text: \"B\" // Label for the marker\n      }) : new google.maps.Marker({\n        position: destination,\n        map: mapInstanceRef.current,\n        title: \"Destination\",\n        label: \"B\" //fall back to label if advanced marker not available\n      });\n    } else if (destinationMarkerRef.current) {\n      destinationMarkerRef.current.setPosition(destination); //update marker position if already created\n    }\n  }, [userLocation, destination]); // Only update markers if location changes\n\n  // Optimize route calculation -> calculate & display route b/w user location and destination\n  const calculateRoute = useCallback(() => {\n    // Exit if any of the required data is missing\n    if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n      return;\n    }\n    console.log(\"📍 Calculating route...\");\n    //direct route rquest parameters \n    const request = {\n      origin: userLocation,\n      //start location\n      destination: destination,\n      //end location\n      travelMode: window.google.maps.TravelMode[travelMode] //travel mode\n    };\n\n    //request route calculation from Google Maps API\n    directionsServiceRef.current.route(request, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        directionsRendererRef.current.setDirections(result); //display calculated route\n\n        // Extract distance and duration\n        const route = result.routes[0].legs[0];\n        const distance = route.distance.text;\n        const duration = route.duration.text;\n\n        // Pass distance and duration back to the parent component\n        if (onRouteCalculated) {\n          onRouteCalculated({\n            [travelMode.toLowerCase()]: {\n              distance,\n              duration\n            }\n          });\n        }\n      } else {\n        console.error(\"Directions request failed:\", status);\n      }\n    });\n  }, [travelMode, userLocation, destination, onRouteCalculated]);\n\n  //Call route calculation when travelMode, userLocation, or destination changes\n  //\n  useEffect(() => {\n    calculateRoute();\n  }, [calculateRoute]); //run when calculateRoute changes\n\n  //return map container\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 12\n  }, this);\n};\n_s(MapNavigation, \"pI1zCxOu3hXxTVLM02pOss1ZVx4=\");\n_c = MapNavigation;\nexport default MapNavigation;\nvar _c;\n$RefreshReg$(_c, \"MapNavigation\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","console","log","MapNavigation","destination","userLocation","travelMode","onRouteCalculated","_s","mapRef","directionsServiceRef","directionsRendererRef","mapInstanceRef","originMarkerRef","destinationMarkerRef","window","google","maps","error","current","Map","zoom","center","disableDefaultUI","DirectionsService","DirectionsRenderer","suppressMarkers","setMap","AdvancedMarkerElement","marker","e","warn","position","map","title","text","Marker","label","setPosition","calculateRoute","request","origin","TravelMode","route","result","status","DirectionsStatus","OK","setDirections","routes","legs","distance","duration","toLowerCase","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sophia/Downloads/Spring 2025/Capstone Project/CampusConnect_1/capstone-project-campusconnect-team/src/pages/MapNavigation.js"],"sourcesContent":["//\nimport React, { useEffect, useRef, useCallback } from \"react\";\nimport '../pages/App.css'; // path to import css file for map styling\n\nconsole.log(\"MapNavigation re-rendered\"); //debugging log to see if component re-renders\n//MapNavigation component that takes in destination, userLocation, travelMode, and onRouteCalculated as props to display with google maps\nconst MapNavigation = ({ destination, userLocation, travelMode, onRouteCalculated }) => {\n    //referencefs for Google Maps API elements \n    const mapRef = useRef(null); //reference to map container\n    const directionsServiceRef = useRef(null); //reference to directions service\n    const directionsRendererRef = useRef(null); //reference to directions renderer\n    const mapInstanceRef = useRef(null); //reference to store map instance\n    const originMarkerRef = useRef(null); //reference to origin marker\n    const destinationMarkerRef = useRef(null); //reference to destination marker\n\n\n    //initalize map & directions services only once \n    useEffect(() => {\n        console.log(\"Initializing map...\");\n        //check if google maps API is loaded\n        if (!window.google || !window.google.maps) {\n            console.error(\"Google Maps API not loaded.\");\n            return;\n        }\n\n        //make & store map instance if not yet initialized \n        if (!mapInstanceRef.current) {\n            mapInstanceRef.current = new window.google.maps.Map(mapRef.current, {\n                zoom: 16, //default zoom level\n                center: userLocation || destination, //center map on userLocation or destination\n                disableDefaultUI: false, // Prevents UI flickering -> disable default controls\n            });\n\n        console.log(\"Map initialized:\", mapInstanceRef.current);\n\n        // Initialize DirectionsService and DirectionsRenderer only once\n        directionsServiceRef.current = new window.google.maps.DirectionsService();\n        directionsRendererRef.current = new window.google.maps.DirectionsRenderer({\n            suppressMarkers: true, // Prevents automatic markers (fixes flickering)\n        });\n            //set directions render to use our created map instance\n            directionsRendererRef.current.setMap(mapInstanceRef.current);\n    }\n    }, []); //only run once\n\n        // Ensure markers are created only once and update their positions\n        useEffect(() => {\n            if (!mapInstanceRef.current) return; // Exit if map is not initialized\n\n            let AdvancedMarkerElement;\n            try {\n                AdvancedMarkerElement = google.maps.marker.AdvancedMarkerElement; //use advanced marker element\n            } catch (e) {\n                console.warn(\"⚠️ AdvancedMarkerElement not available. Falling back to google.maps.Marker.\");\n            }\n    \n            // **Use location marker (A) **\n            if (!originMarkerRef.current && userLocation) {\n                originMarkerRef.current = AdvancedMarkerElement\n                    ? new AdvancedMarkerElement({\n                          position: userLocation,\n                          map: mapInstanceRef.current,\n                          title: \"Your Location\",\n                          text: \"A\", // Label for the marker\n                      })\n                    : new google.maps.Marker({\n                          position: userLocation,\n                          map: mapInstanceRef.current,\n                          title: \"Your Location\",\n                          label: \"A\", //fall back to label if advanced marker not available\n                      });\n            } else if (originMarkerRef.current) {\n                originMarkerRef.current.setPosition(userLocation); //update marker position if already created \n            }\n    \n            /* **Use destination marker (B) ** */\n            if (!destinationMarkerRef.current && destination) {\n                destinationMarkerRef.current = AdvancedMarkerElement\n                    ? new AdvancedMarkerElement({\n                          position: destination,\n                          map: mapInstanceRef.current,\n                          title: \"Destination\",\n                          text: \"B\", // Label for the marker\n                      })\n                    : new google.maps.Marker({\n                          position: destination,\n                          map: mapInstanceRef.current,\n                          title: \"Destination\",\n                          label: \"B\", //fall back to label if advanced marker not available\n                      });\n            } else if (destinationMarkerRef.current) {\n                destinationMarkerRef.current.setPosition(destination); //update marker position if already created\n            }\n\n        }, [userLocation, destination]); // Only update markers if location changes\n\n    \n    // Optimize route calculation -> calculate & display route b/w user location and destination\n        const calculateRoute = useCallback(() => {\n            // Exit if any of the required data is missing\n            if (!userLocation || !destination || !directionsServiceRef.current || !directionsRendererRef.current) {\n                return;\n            }\n\n            console.log(\"📍 Calculating route...\");\n            //direct route rquest parameters \n            const request = {\n                origin: userLocation, //start location\n                destination: destination, //end location\n                travelMode: window.google.maps.TravelMode[travelMode], //travel mode\n            };\n\n            //request route calculation from Google Maps API\n            directionsServiceRef.current.route(request, (result, status) => {\n                if (status === window.google.maps.DirectionsStatus.OK) {\n                    directionsRendererRef.current.setDirections(result); //display calculated route\n\n                    // Extract distance and duration\n                    const route = result.routes[0].legs[0];\n                    const distance = route.distance.text;\n                    const duration = route.duration.text;\n\n                    // Pass distance and duration back to the parent component\n                    if (onRouteCalculated) {\n                        onRouteCalculated({[travelMode.toLowerCase()]: { distance, duration }});\n                    }\n                } else {\n                    console.error(\"Directions request failed:\", status);\n                }\n            });\n        \n        }, [travelMode, userLocation, destination, onRouteCalculated]);\n\n    //Call route calculation when travelMode, userLocation, or destination changes\n    //\n    useEffect(() => {\n        calculateRoute();\n    }, [calculateRoute]);//run when calculateRoute changes\n\n    //return map container\n    return <div ref={mapRef} className=\"map-container\" />;\n};\n\nexport default MapNavigation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}